<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippets on Megatech</title>
    <link>https://megate.ch/code/snippets/</link>
    <description>Recent content in Snippets on Megatech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Mar 2022 09:59:43 -0700</lastBuildDate><atom:link href="https://megate.ch/code/snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>index_2d</title>
      <link>https://megate.ch/code/snippets/index_2d/</link>
      <pubDate>Tue, 29 Mar 2022 20:18:59 -0700</pubDate>
      
      <guid>https://megate.ch/code/snippets/index_2d/</guid>
      <description>#include &amp;lt;cinttypes&amp;gt; template &amp;lt;bool IsRowMajor, typename SizeType = std::size_t&amp;gt; class basic_indexer_2d final { public: using size_type = SizeType; private: size_type m_stride{ }; public: explicit constexpr basic_indexer_2d(const size_type stride) : m_stride{ stride } { } constexpr basic_indexer_2d(basic_indexer_2d&amp;amp;&amp;amp; other) = default; constexpr basic_indexer_2d(const basic_indexer_2d&amp;amp; other) = default; constexpr ~basic_indexer_2d() noexcept = default; constexpr basic_indexer_2d&amp;amp; operator=(basic_indexer_2d&amp;amp;&amp;amp; rhs) = default; constexpr basic_indexer_2d&amp;amp; operator=(const basic_indexer_2d&amp;amp; rhs) = default; constexpr size_type operator()(const size_type row, const size_type column) const noexcept { if constexpr (IsRowMajor) { return (row * m_stride) + column; } else { return (column * m_stride) + row; } } }; using row_major_indexer_2d = basic_indexer_2d&amp;lt;true&amp;gt;; using column_major_indexer_2d = basic_indexer_2d&amp;lt;false&amp;gt;; </description>
    </item>
    
    <item>
      <title>is_pow2</title>
      <link>https://megate.ch/code/snippets/is_pow2/</link>
      <pubDate>Tue, 29 Mar 2022 20:14:58 -0700</pubDate>
      
      <guid>https://megate.ch/code/snippets/is_pow2/</guid>
      <description>#include &amp;lt;concepts&amp;gt; constexpr bool is_pow2(std::unsigned_integral auto x) { return x &amp;amp;&amp;amp; !(x &amp;amp; (x - 1)); } </description>
    </item>
    
    <item>
      <title>ulog2</title>
      <link>https://megate.ch/code/snippets/ulog2/</link>
      <pubDate>Tue, 29 Mar 2022 13:39:00 -0700</pubDate>
      
      <guid>https://megate.ch/code/snippets/ulog2/</guid>
      <description>#include &amp;lt;cinttypes&amp;gt;#include &amp;lt;climits&amp;gt; #include &amp;lt;bit&amp;gt;#include &amp;lt;type_traits&amp;gt;#include &amp;lt;concepts&amp;gt;#include &amp;lt;stdexcept&amp;gt; template &amp;lt;std::unsigned_integral Type, std::size_t BITS = sizeof(Type) * CHAR_BIT&amp;gt; constexpr Type ulog2(const Type x) { if (!x) { throw std::domain_error{ &amp;#34;ulog2(0) is undefined.&amp;#34; }; } auto middle = BITS &amp;gt;&amp;gt; 1; for (auto left = std::size_t{ 0 }, right = BITS; left &amp;lt;= right; middle = (right + left) &amp;gt;&amp;gt; 1) { auto cmp = std::bit_cast&amp;lt;std::make_signed_t&amp;lt;Type&amp;gt;&amp;gt;(x - (Type{ 1 } &amp;lt;&amp;lt; middle)); if (cmp &amp;gt; 0) { left = middle + 1; } else if (cmp &amp;lt; 0) { right = middle - 1; } else { return middle; } } return middle; } </description>
    </item>
    
  </channel>
</rss>
