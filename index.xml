<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Megatech</title><link>https://megate.ch/</link><description>Recent content on Megatech</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><managingEditor>gnomesort@megate.ch (Alexander Rothman)</managingEditor><webMaster>gnomesort@megate.ch (Alexander Rothman)</webMaster><copyright>Â© Alexander Rothman</copyright><lastBuildDate>Mon, 16 Sep 2024 20:59:57 -0700</lastBuildDate><atom:link href="https://megate.ch/index.xml" rel="self" type="application/rss+xml"/><item><title>Megatech-Vulkan Dispatch</title><author>gnomesort@megate.ch</author><category>projects</category><link>https://megate.ch/projects/megatech_vulkan_dispatch/</link><pubDate>Mon, 09 Sep 2024</pubDate><guid>https://megate.ch/projects/megatech_vulkan_dispatch/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>All the way &lt;a href="https://megate.ch/projects/standard_cxx_tic_tac_toe/">back in March&lt;/a>, I wrote that I thought a text-mode game would be a
good next step after my little Tic-Tac-Toe project. When it came time to decide on something to work on, I actually
did attempt this. I wanted to write a little &lt;a href="https://invisible-island.net/ncurses/announce.html">NCURSES&lt;/a>
role-playing game. Unfortunately, I quickly lost interest. The big problem was that there simply isn&amp;rsquo;t a reliable why
to retrieve keyboard input from the NCURSES interface. I tried using a different library
(&lt;a href="https://github.com/dankamongmen/notcurses">notcurses&lt;/a>) to resolve this, but I was left feeling that my needs just
didn&amp;rsquo;t map to the capabilities that were actually available.&lt;/p>
&lt;p>In the same post where I wrote about wanting to write a text-mode game, I also wrote that I was tempted to go back to
&lt;a href="https://www.khronos.org/opengl/">OpenGL&lt;/a> or &lt;a href="https://www.vulkan.org/">Vulkan&lt;/a>. Well, obviously, that&amp;rsquo;s what I ended
up doing. After becoming frustrated with NCURSES, I decided to simply return to a topic I find interesting. I thought
it would be fun to return to writing my own Vulkan API tool-kit.&lt;/p>
&lt;p>Previously, when I&amp;rsquo;ve attempted this type of project, my eyes have been bigger than my stomach. To help keep
everything grounded in reality, I decided to focus exclusively on Vulkan and start at the most basic level. In my
opinion, the most basic level of Vulkan functionality is just preparing to access the API.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Before a Vulkan program can do anything interesting, it needs to discover function pointers to the commands that it&amp;rsquo;s
going to use. Usually, a program can just link the Vulkan loader library and let the operating system&amp;rsquo;s run-time
linker resolve the core Vulkan commands. Unfortunately, the
&lt;a href="https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#initialization-functionpointers">Vulkan specification&lt;/a>
says this:&lt;/p>
&lt;blockquote>
&lt;p>Vulkan commands are not necessarily exposed by static linking on a platform.&lt;/p>
&lt;/blockquote>
&lt;p>This means that, with only one exception, applications might be required to resolve Vulkan commands using
&lt;a href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetInstanceProcAddr.html">&lt;code>vkGetInstanceProcAddr&lt;/code>&lt;/a>.
The singular exception is, of course, &lt;code>vkGetInstanceProcAddr&lt;/code> itself. On this, the
specification provides some clarification:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>vkGetInstanceProcAddr&lt;/code> itself is obtained in a platform- and loader- specific manner. Typically, the loader library
will export this command as a function symbol, so applications &lt;strong>can&lt;/strong> link against the loader library, or load it
dynamically and look up the symbol using platform-specific APIs.&lt;/p>
&lt;/blockquote>
&lt;p>There is actually a second issue though. In addition to the above bits, the Vulkan specification says:&lt;/p>
&lt;blockquote>
&lt;p>In order to support systems with multiple Vulkan implementations, the function pointers returned by
&lt;code>vkGetInstanceProcAddr&lt;/code> &lt;strong>may&lt;/strong> point to dispatch code that calls a different real implementation for different
&lt;a href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDevice.html">&lt;code>VkDevice&lt;/code>&lt;/a> objects or their child
objects. The overhead of the internal dispatch for &lt;code>VkDevice&lt;/code> objects can be avoided by obtaining device-specific
function pointers for any commands that use a device or device-child object as
their dispatchable object.&lt;/p>
&lt;/blockquote>
&lt;p>To summarize all of this, a Vulkan application should do two things in the name of portability and performance. First,
it should always resolve Vulkan commands using one of the two available resolvers (i.e., &lt;code>vkGetInstanceProcAddr&lt;/code> or
&lt;a href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceProcAddr.html">&lt;code>vkGetDeviceProcAddr&lt;/code>&lt;/a>).
Any other method of accessing Vulkan is not guaranteed. Second, it should avoid resolving device-level functionality
with &lt;code>vkGetInstanceProcAddr&lt;/code>. Using &lt;code>vkGetDeviceProcAddr&lt;/code> is better because it allows the application to avoid
additional dispatch work each time it invokes a device-level command.&lt;/p>
&lt;p>So, here&amp;rsquo;s the problem: how does a Vulkan application manage this in a way that doesn&amp;rsquo;t suck?&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>My solution is a two-parter. First, there&amp;rsquo;s the
&lt;a href="https://github.com/gn0mesort/megatech-vulkan-dispatch">Megatech-Vulkan Dispatch&lt;/a> library. It&amp;rsquo;s a pretty simple
&lt;span class="nowrap">C++20&lt;/span> library that stores Vulkan function pointers in arrays. Second, there&amp;rsquo;s a Python
script that generates the actual lists of Vulkan commands used in the &lt;span class="nowrap">C++&lt;/span> library. This
script is actually where a lot of the magic is happening.&lt;/p>
&lt;p>The script, which is a part of the
&lt;a href="https://github.com/gn0mesort/megatech-vulkan-dispatch-tools">Megatech-Vulkan Dispatch Tools&lt;/a> package, is used to
extract information from the XML representation of Vulkan. The script reads the XML specification, parses it, and
extracts the bits relevant to commands. At that point it reads and renders a &lt;a href="https://www.makotemplates.org/">Mako&lt;/a>
template to generate its output. The trick, in so far as any of this is a trick, is that the script understands enough
of the Vulkan specification to provide the input template with very specific lists of commands. A user could, for
example, ask it to only provide commands that are available in Vulkan 1.0, &lt;code>VK_KHR_surface&lt;/code>, &lt;code>VK_KHR_xcb_surface&lt;/code>, and
&lt;code>VK_KHR_swapchain&lt;/code>. The script also understands dependencies between Vulkan features. This means that if a user
requests a feature but doesn&amp;rsquo;t request the feature&amp;rsquo;s dependencies, the script will report an error.&lt;/p>
&lt;p>The library is all about keeping things simple. As I already said, its main job is to store function pointers in
arrays. It&amp;rsquo;s not exactly rocket science. The library provides three dispatch table objects (one for each level of
Vulkan functionality). When an application initializes a dispatch table, the library loads the function pointers for
the corresponding level of functionality. To retrieve a function pointer the application queries the dispatch table
using either an index (in the form of a scoped enumeration value) or a hash value (computed using the 64-bit
&lt;a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1a&lt;/a> hash function). In either case,
the library prefers to resolve these operations at compile-time. Basically, the strategy is to pay for loading Vulkan
commands up front so that applications don&amp;rsquo;t have to call &lt;code>vkGetInstanceProcAddr&lt;/code> or &lt;code>vkGetDeviceProcAddr&lt;/code> in their
main loop.&lt;/p>
&lt;h2 id="thoughts">Thoughts&lt;/h2>
&lt;p>Something I&amp;rsquo;ve been coping with a lot lately is realizing how obsessive I can be. I have a terrible time letting go of
things, and it&amp;rsquo;s even worse when I&amp;rsquo;m being told I can&amp;rsquo;t do something. Vulkan is quickly becoming one of my obsessions.
I simply can&amp;rsquo;t stand the idea that mastering it is too hard for me.&lt;/p>
&lt;p>The dispatch problem is one I&amp;rsquo;ve tackled before (my previous project is &lt;a href="https://github.com/gn0mesort/vkfl">VKFL&lt;/a>),
but I think this implementation is better considered than my previous work. Previously, I had used indexing as the
exclusive method for accessing Vulkan commands. Since the library can be compiled with different sets of available
commands, this could lead to an issue where an application would need to be recompiled any time the library changed.
I guess a lot of software is that way ultimately, but the hash API that I&amp;rsquo;ve provided here solves the issue in this
case. I think splitting the dispatch table up by level is a much better approach too. Previously, I had one dispatch
table type that would be updated to use new functionality as it became available. This is fine for a Vulkan
application with a single instance and device, but for multiple devices it permits some kind of weird behavior. The
implementation I&amp;rsquo;ve used for this project, I think, is much clearer about what a client application should do (i.e.,
give each device its own table).&lt;/p>
&lt;p>I&amp;rsquo;m not super enthusiastic about this Vulkan dispatch thing to be clear. To me this is just a good way to get back to
thinking about Vulkan. Dispatch tables aren&amp;rsquo;t a huge technical achievement, but they are something I need to build
further Vulkan tools. My actual interest is in building a highly configurable graph-based 3D renderer.&lt;/p>
&lt;p>That isn&amp;rsquo;t to say I think this is bad work though. There are other solutions to this floating around out there. The
two I&amp;rsquo;m familiar with most, &lt;a href="https://github.com/zeux/volk">Volk&lt;/a> and
&lt;a href="https://github.com/KhronosGroup/Vulkan-Hpp">vulkan.hpp&lt;/a>&amp;rsquo;s &lt;code>DispatchLoaderDynamic&lt;/code>, both have features I think are
undesirable. Hopefully, Megatech-Vulkan Dispatch is useful to anyone who feels the more mainstream approaches don&amp;rsquo;t
fit into their application. Even if my library doesn&amp;rsquo;t fit, I hope the generator script is at least instructive to
some degree.&lt;/p>
&lt;p>On a more personal note, I&amp;rsquo;ve been pretty up and down lately. Some days I&amp;rsquo;m feeling very positive and can get a lot
done. Other days, I just end up sleeping. The killer heat here hasn&amp;rsquo;t helped in that regard. I&amp;rsquo;ll just keep drinking
water and pushing forward though.&lt;/p>
&lt;p>Writing these posts is always a struggle and I don&amp;rsquo;t get much done around them. Once, this is published though, I can
get started on my next thing. Right now, I&amp;rsquo;m thinking of continuing on with Vulkan. If I get bored, I might switch
gears to another game project instead. That&amp;rsquo;s just life, I try to focus on one thing but end up focusing on something
else entirely.&lt;/p></description></item><item><title>Sunset 76</title><author>gnomesort@megate.ch</author><category>projects</category><link>https://megate.ch/projects/sunset_76/</link><pubDate>Thu, 11 Apr 2024</pubDate><guid>https://megate.ch/projects/sunset_76/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In January, a friend of mine approached me about creating a web page for his small business. The business,
&lt;a href="https://sunset76.com">Sunset 76&lt;/a>, had a domain name and some kind of shared web hosting package, but the previous
operator had essentially abandoned it. The result was
&lt;a href="https://megate.ch/img/sunset_76_original_desktop.png">a largely blank page with some blurry JPEG images&lt;/a>
(&lt;a href="https://megate.ch/img/sunset_76_original_mobile.png">mobile&lt;/a>) that reflected poorly on Sunset 76.&lt;/p>
&lt;p>I&amp;rsquo;m not a huge web guy, but I agreed to help. After all, the needs of a small business generally don&amp;rsquo;t involve vast
web applications or services. Really, the only thing the business required was a single static web page answering its
customer&amp;rsquo;s most common questions.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Basically, there were two problems involved in building a web page for Sunset 76. First, I needed to write the page
itself, write the stylesheet, and create any images that the page required. Second, I needed to wrangle the hosting
service, &lt;a href="https://www.turbify.com/">Turbify&lt;/a>, and convince it to display the page rather than one made through its
builder.&lt;/p>
&lt;p>Sunset 76&amp;rsquo;s new page needed to meet only the most basic requirement. It needed to look more or less professional. That
meant &lt;a href="https://megate.ch/img/sunset_76_new_desktop.png">no blurry JPEG images&lt;/a> and a
&lt;a href="https://megate.ch/img/sunset_76_new_mobile.png">responsive layout that would look presentable across devices&lt;/a>. Additionally, I needed
to acquire any resource files myself.&lt;/p>
&lt;p>Handling Turbify shouldn&amp;rsquo;t have been an issue. Uploading a file to a web server and configuring it to serve that same
file should be easy. Unfortunately, Turbify&amp;rsquo;s web interface has some issues. At least on my end, pages that should
exist don&amp;rsquo;t (e.g., their &lt;a href="https://www.cpanel.net/">cPanel&lt;/a> interface is intermittently inaccessible), links in
documentation go to missing pages, and there&amp;rsquo;s no clear way to disable a web site created through the builder
application.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>Writing a static web page isn&amp;rsquo;t an especially complicated task. The hardest part is writing a stylesheet that looks
good independent of the device displaying it. Even then, writing a sufficient stylesheet is mostly just time-consuming
rather than cognitively challenging. In addition to HTML and CSS, I prepared images and typefaces for Sunset 76. I
prepared the logo, under advisement from the client, using &lt;a href="https://inkscape.org/">Inkscape&lt;/a> and chose
&lt;a href="http://mozilla.github.io/Fira/">Fira Sans&lt;/a> for the type. I also prepared additional images by rendering PDFs provided
by the California Bureau of Automotive Repair into appropriately sized PNG images.&lt;/p>
&lt;p>Getting Turbify to behave was a bigger issue than writing the web page. When I&amp;rsquo;ve dealt with web hosting in the past,
it&amp;rsquo;s always been using a dedicated server that I could access using SSH. Unsurprisingly, in a shared hosting
environment this is a no-go. Instead, I needed to do everything through Turbify&amp;rsquo;s cPanel. I don&amp;rsquo;t think this would
have been so bad except that it was only accessible occasionally. Uploading the files wasn&amp;rsquo;t enough though. I still
had to rewrite an &lt;code>.htaccess&lt;/code> file to make the page visible. I&amp;rsquo;m not big on &lt;a href="https://httpd.apache.org/">Apache&lt;/a>
(Turbify seems to actually be using &lt;a href="https://www.litespeedtech.com/products/litespeed-web-server">LiteSpeed&lt;/a>) so I had
to learn to do that.&lt;/p>
&lt;h2 id="thoughts">Thoughts&lt;/h2>
&lt;p>This was a pretty simple project and, for me, the real lesson was about technical debt. Sunset 76&amp;rsquo;s biggest problem
wasn&amp;rsquo;t creating a functional static web page. Rather, its biggest difficulty was working around past decisions. I&amp;rsquo;m
sure that, in the past, Turbify made sense. It probably didn&amp;rsquo;t require paying someone like me, and I&amp;rsquo;m sure that was
a big plus in a world where most small businesses had a minimal web presence. Now, in a time when a web presence is
more crucial the consequences of that previous decision need to be paid off.&lt;/p>
&lt;p>In an ideal world, I think Sunset 76 would have ditched Turbify completely. It&amp;rsquo;s better to pay off all of that debt if
possible. Realistically though, business needs to go on as usual, and I wasn&amp;rsquo;t contracted to reimagine Sunset 76&amp;rsquo;s IT
situation. That&amp;rsquo;s just how commercial projects are. It&amp;rsquo;s that way even between friends. It would be nice to return to
this some day and go for broke. Right now though, I&amp;rsquo;m content with the result.&lt;/p>
&lt;p>This project started in January but, for various reasons, had a long hiatus until recently. I don&amp;rsquo;t mind, especially
to help a friend, but I feel like this project somewhat interrupted my flow. Prior to returning to this, I had started
on a &lt;a href="https://invisible-island.net/ncurses/">NCURSES&lt;/a> based game project. Hopefully, in the near term I can focus on
that project. I&amp;rsquo;d like to get at least a demo completed and available before moving on to anything else.&lt;/p></description></item><item><title>Standard C++ Tic-Tac-Toe</title><author>gnomesort@megate.ch</author><category>projects</category><link>https://megate.ch/projects/standard_cxx_tic_tac_toe/</link><pubDate>Thu, 21 Mar 2024</pubDate><guid>https://megate.ch/projects/standard_cxx_tic_tac_toe/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Early in 2016, I really started to pick up &lt;span class="nowrap">C++&lt;/span>. I was taking an introductory level city
college course that was a little too easy for me because I had taken a similar course several years prior. It was
pretty standard, in my opinion, for a basic computer programming course. Most of the assignments involved writing
&lt;a href="https://megate.ch/code/toy_sorter/">toy applications&lt;/a>, which is something I&amp;rsquo;ve always hated doing. On the other hand, I was also
assigned a project for the duration of the course, which I ended up greatly enjoying. Essentially, the project was to
be a demonstration of the course&amp;rsquo;s material. The project would be graded twice, once at the half-way mark of the
course alongside the midterm exam and once again at the end of the course. More importantly, the project needed to be
creative and impressive. It wasn&amp;rsquo;t a requirement, but the professor&amp;rsquo;s expectation was that each student would write a
game in more or less standard &lt;span class="nowrap">C++&lt;/span> (e.g., &lt;span class="nowrap">C++11&lt;/span> or
&lt;span class="nowrap">C++14&lt;/span> at the time).&lt;/p>
&lt;p>Technically the professor allocated the entire duration of the course to the project. However, the reality was that I
had closer to two weeks to develop each version. Two weeks were available to develop the first version in time for the
midterm exam. Two more weeks were available to improve it in time for the final. Despite being pulled in many
directions at the time, I found the experience of writing a whole game that quickly enjoyable. The result is a small
&lt;a href="https://github.com/gn0mesort/RothmanAlexander_CSC5_41202/tree/master/Projects/Project%202/Desperado_V1">hangman game with some RPG styling on top&lt;/a>.
I think I was being a bit conservative about what I could and couldn&amp;rsquo;t do in the available time, so I wasn&amp;rsquo;t
especially satisfied with the result.&lt;/p>
&lt;p>Luckily, I ended up taking another &lt;span class="nowrap">C++&lt;/span> course with the same professor that fall. Once
again, I got to write a game in about four weeks total. For the second game, I ended up writing a simplistic roguelike.
I called it
&lt;a href="https://github.com/gn0mesort/RothmanAlexander_CSC17A_48096/tree/master/proj/Project_2/Overflow_2">Overflow&lt;/a> and,
somewhat embarrassingly, I&amp;rsquo;m still fairly proud of it. After completing it though, I never really revisited the idea.&lt;/p>
&lt;p>In December of last year, I started to think about these little game projects again. Unlike the games I wrote in the
past though, I wanted to really consider what a game written in only standard &lt;span class="nowrap">C++&lt;/span> (i.e.,
&lt;span class="nowrap">C++20&lt;/span>) would look like. To
keep things simple, I decided to implement &lt;a href="https://github.com/gn0mesort/ttt">Tic-Tac-Toe&lt;/a>. Besides being simple to
implement, my hope is that anyone else who is interested in writing these kinds of games can use the source code as an
example.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>When I sat down to actually implement this game the first thing I considered was what I absolutely needed. The common
types of computer games (i.e., games written for hardware 3D APIs and graphical user interface systems) have a whole
variety of tools at their disposal that aren&amp;rsquo;t available in any version of the &lt;span class="nowrap">C++&lt;/span>
standard. The most problematic deficiencies are the lack of any interactive input and a lack of any inter-process
communication.&lt;/p>
&lt;p>In general, computer games are basically looping programs that read input from one set of devices and write output to
another. Once per loop iteration, the program reads its input, integrates the input into its state, and writes output.
These games are interactive because the devices they read input from and write output to are handled separately from
the game loop itself. That is to say, the game can begin its next loop before the user has actually seen the output,
and it can continue even when there is no input at all.&lt;/p>
&lt;p>Unfortunately, &lt;span class="nowrap">C++20&lt;/span> lacks any concept of this type of interactivity. The closest that
you can get, as far as I know, is to rely upon a hosted environment connecting standard input to an interactive
terminal. If it does, then you can rely on reads blocking until a user writes input into the terminal, and you can
rely on never reaching an end-of-file state. This is basically what Overflow and other student applications do. It&amp;rsquo;s
doubly unfortunate then that this can&amp;rsquo;t be relied upon either. If standard input is not an interactive terminal then
there&amp;rsquo;s no reliable way to receive input interactively. As I understand it, there&amp;rsquo;s no standard way to detect this
behavior either.&lt;/p>
&lt;p>To make things more difficult, there&amp;rsquo;s no standard way to send messages to other processes or receive responses.
&lt;span class="nowrap">C++20&lt;/span> has plenty of ways to do this within a single process (e.g.,
&lt;a href="https://en.cppreference.com/w/cpp/utility/program/raise">&lt;code>std::raise&lt;/code>&lt;/a> or
&lt;a href="https://en.cppreference.com/w/cpp/thread/counting_semaphore">&lt;code>std::binary_semaphore&lt;/code>&lt;/a>) but no way to communicate
outside without extensions to the standard library. This effectively rules out most naive strategies for
interactivity, but it also causes another problem.&lt;/p>
&lt;p>Since there&amp;rsquo;s no standard way to communicate between processes its impossible for a standard
&lt;span class="nowrap">C++&lt;/span> program to synchronize access to resources that it might require. For example, if a
user spawned two or more instances of a game process, they might end up corrupting any files that the processes write
to. In a non-standard setting multiple instances of a single program could communicate and decide how to handle this
issue. A standard program needs to find its own solution though.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>For my implementation of Tic-Tac-Toe, I ended up solving both problems by leveraging the standard I/O library and the
standard file system library. Instead of relying on a single looping process, my implementation is actually four
separate applications. Each application reads, potentially modifies, and writes a shared data file. Of course, issues
would still arise if multiple applications could access the data file at the same time. To synchronize access to the
shared data file, my implementation provides a
&lt;a href="https://github.com/gn0mesort/ttt/blob/master/include/megatech/ttt/details/lockfile.hpp">&lt;code>lockfile&lt;/code>&lt;/a> type using only
standard components.&lt;/p>
&lt;p>Although it requires some finesse, controlling file access is possible using &lt;span class="nowrap">C++20&lt;/span>. The
way it works is that an application passes each &lt;code>lockfile&lt;/code> object a
&lt;a href="https://en.cppreference.com/w/cpp/filesystem/path">&lt;code>std::filesystem::path&lt;/code>&lt;/a> that addresses the file to lock. During
the locking procedure, the &lt;code>lockfile&lt;/code> attempts to create another file by prepending &lt;code>&amp;quot;.~lock&amp;quot;&lt;/code> to the file name. To do
this, the &lt;code>lockfile&lt;/code> object calls &lt;a href="https://en.cppreference.com/w/cpp/io/c/fopen">&lt;code>std::fopen&lt;/code>&lt;/a> with the special &lt;code>&amp;quot;wx&amp;quot;&lt;/code>
mode. This mode ensures that &lt;code>std::fopen&lt;/code> only creates a new file if a file with the same name doesn&amp;rsquo;t exist.
Unfortunately, the equivalent behavior for &lt;a href="https://en.cppreference.com/w/cpp/io/basic_fstream">&lt;code>std::fstream&lt;/code>&lt;/a>
isn&amp;rsquo;t available until &lt;span class="nowrap">C++23&lt;/span>. The &lt;code>lockfile&lt;/code> then stores the resulting pointer. This
procedure fails if the &lt;code>lockfile&lt;/code> already owns a pointer or if the call to &lt;code>std::fopen&lt;/code> fails. As long as the
applications used to implement the game obey these locks then they can effectively synchronize file access.&lt;/p>
&lt;p>To make the game interactive, each application accesses a single binary file. This file, which is described in detail
in the &lt;a href="https://github.com/gn0mesort/ttt/blob/master/README.md">&lt;code>README&lt;/code>&lt;/a>, is 17 bytes long and contains the entire
state of a Tic-Tac-Toe game. Actually, the game state only requires 22 bits. The rest of the file is metadata. The
applications are completely serial programs that implement one major game function each. To play interactively then,
a player executes a sequence of programs. First, he or she creates a game by executing
&lt;a href="https://github.com/gn0mesort/ttt/blob/master/src/new_game.cpp">&lt;code>ttt-new-game&lt;/code>&lt;/a>. Next, he or she executes
&lt;a href="https://github.com/gn0mesort/ttt/blob/master/src/take_turn.cpp">&lt;code>ttt-take-turn&lt;/code>&lt;/a> to take a turn. In the single player
mode, &lt;code>ttt-take-turn&lt;/code> will also handle the computer player&amp;rsquo;s turn. In the multiplayer mode, the second player needs to
invoke &lt;code>ttt-take-turn&lt;/code> with his or her selection. Finally, the player can delete the game data by executing
&lt;a href="https://github.com/gn0mesort/ttt/blob/master/src/delete_game.cpp">&lt;code>ttt-delete-game&lt;/code>&lt;/a>. The fourth application,
&lt;a href="https://github.com/gn0mesort/ttt/blob/master/src/display_game.cpp">&lt;code>ttt-display-game&lt;/code>&lt;/a>, will output the current game
state on command without modifying it.&lt;/p>
&lt;p>Of the four applications, only two applications expect any user input. The applications handle user input through
program arguments passed to &lt;code>main()&lt;/code> (i.e., values stored in &lt;code>argv&lt;/code>). &lt;code>ttt-new-game&lt;/code> accepts a game mode which is
completely optional. On the other hand, &lt;code>ttt-take-turn&lt;/code> requires the user to provide the column and row index of a
location on the game board that he or she wants to mark.&lt;/p>
&lt;h2 id="thoughts">Thoughts&lt;/h2>
&lt;p>I&amp;rsquo;m more or less content with the resulting approach to standard &lt;span class="nowrap">C++&lt;/span> games. Obviously,
Tic-Tac-Toe is the least exciting game imaginable, but I think the approach could be extended to much more complex
games. Eventually, I&amp;rsquo;d like to try another roguelike or some other kind of role-playing game written this way.
My solution, in particular, suffers from the lack of any advanced argument parsing functionality. That&amp;rsquo;s a conscious
choice on my part. If I had a module similar to the GNU
&lt;a href="https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Options.html">&lt;code>getopt_long&lt;/code>&lt;/a> available then I would
have wrapped the entire game in a single application. The implementation of &lt;code>getopt_long&lt;/code> doesn&amp;rsquo;t require any
nonstandard functionality, but I felt it was beyond the scope of a Tic-Tac-Toe game. For a more complex game, I think
argument parsing is an absolute requirement.&lt;/p>
&lt;p>Another deficiency is the &lt;code>lockfile&lt;/code> mechanism. Unfortunately, I don&amp;rsquo;t think there&amp;rsquo;s a fix for this that only requires
standard &lt;span class="nowrap">C++&lt;/span> code. The &lt;code>lockfile&lt;/code> implementation is sufficient if every process on a
system obeys it, but that&amp;rsquo;s not much of a guarantee. It also exhibits all the fun problems that the POSIX
&lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html">&lt;code>openat()&lt;/code>&lt;/a> function resolves. Actually, being
able to use the POSIX interface makes implementing text-mode games much simpler.&lt;/p>
&lt;p>Right now, I think the next step for me will be something more complex. This project was a fun exercise, but I want to
keep busy for a longer period of time. It&amp;rsquo;s tempting to jump back to doing something with
&lt;a href="https://www.opengl.org/">OpenGL&lt;/a> or &lt;a href="https://www.vulkan.org/">Vulkan&lt;/a>. On the other hand, a game with a better
text-mode interface feels like a more logical next step. In any case, whatever I do next will be more interesting to
me than Tic-Tac-Toe.&lt;/p>
&lt;p>By the way, there are a couple of secrets included in this game. For a while now, I&amp;rsquo;ve been lingering on what
William Gibson says about cyberspace in &lt;em>Neuromancer&lt;/em>. Which is to say that cyberspace is a consensual hallucination.
Lately, I feel too many games try to be wholly realistic. I think the best games are a bit dream-like. They should
have a quality, separate from any design, that is just slightly unreal. Clocks should have five hands. People should
speak in a way that sounds like a language but isn&amp;rsquo;t one. The same road should sometimes lead to different locations.
In a dream, things are just coherent enough to tell the story and no more coherent than that. Anyway, this is all to
say that I think it&amp;rsquo;s important for games to have their own curious little behaviors. A good game always needs a
secret or two.&lt;/p></description></item><item><title>Godot 3.x Patch for Doomsday Paradise</title><author>gnomesort@megate.ch</author><category>projects</category><link>https://megate.ch/projects/godot_3_x_patch_for_doomsday_paradise/</link><pubDate>Wed, 28 Feb 2024</pubDate><guid>https://megate.ch/projects/godot_3_x_patch_for_doomsday_paradise/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Last summer (the summer of 2023), I was contracted by &lt;a href="https://www.lemonadeflashbang.com/">Lemonade Flashbang&lt;/a> to
write a patch for the &lt;a href="https://godotengine.org/">Godot&lt;/a> game engine. The patch fixes text display issues in the
simplified Chinese, traditional Chinese, and Japanese localizations of
&lt;a href="https://store.steampowered.com/app/1603420/Doomsday_Paradise/">Doomsday Paradise&lt;/a>. By patching Godot, Lemonade
Flashbang could present its game at &lt;a href="https://bitsummit.org/en/">Bitsummit&lt;/a> last July and launch it on
&lt;a href="https://store.steampowered.com/">Steam&lt;/a> last November.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Before version 4.0, Godot produced inappropriate line-breaking behavior for CJK text. The inappropriate behavior was
observable using both the &lt;a href="https://docs.godotengine.org/en/3.5/classes/class_label.html">&lt;code>Label&lt;/code>&lt;/a> and
&lt;a href="https://docs.godotengine.org/en/3.5/classes/class_richtextlabel.html">&lt;code>RichTextLabel&lt;/code>&lt;/a> nodes. Unfortunately, in
Godot 3.x, automatic line-breaking is handled differently in &lt;code>Label&lt;/code> and &lt;code>RichTextLabel&lt;/code> nodes. Each node requires a
separate solution (or a large-scale change to its functionality, such as the changes included in 4.0). &lt;code>Label&lt;/code> nodes
break the entire text into a linked list of separable strings. When inserting more text into the list would overflow a
line, Godot inserts a specialized
&lt;a href="https://github.com/gn0mesort/godot/blob/3.5-stable/scene/gui/label.h#L72">&lt;code>WRAPLINE&lt;/code>&lt;/a> element. &lt;code>RichTextLabel&lt;/code> nodes,
on the other hand, use a more complex approach. A Godot 3.x &lt;code>RichTextLabel&lt;/code> node contains a linked list of
&lt;a href="https://github.com/gn0mesort/godot/blob/3.5-stable/scene/gui/rich_text_label.h#L112">&lt;code>RichTextLabel::Item&lt;/code>&lt;/a> objects.
Each &lt;code>Item&lt;/code> represents a formatted segment of the &lt;code>RichTextLabel&lt;/code> node&amp;rsquo;s content. However, not all of the content of a
&lt;code>RichTextLabel&lt;/code> needs to be text. The result is that each &lt;code>Item&lt;/code> may represent the entire text (the simplest case), a
portion of the text, or no text at all. When automatically inserting line breaks into a &lt;code>RichTextLabel&lt;/code>, Godot 3.x
only considers whether or not the text in the current &lt;code>Item&lt;/code> would overflow the current line. This approach works fine
for English text but is a source of many errors for languages using CJK characters.&lt;/p>
&lt;p>To make matters more complex, Godot 3.x&amp;rsquo;s source code exhibits some common issues often found in lower-quality
&lt;span class="nowrap">C++&lt;/span> source code. In both &lt;code>Label&lt;/code> and &lt;code>RichTextLabel&lt;/code> nodes, the method that handles the
automatic line-breaking process is quite long.
&lt;a href="https://github.com/gn0mesort/godot/blob/3.5-stable/scene/gui/rich_text_label.cpp#L143">&lt;code>RichTextLabel::_process_line&lt;/code>&lt;/a>
(the method responsible for automatic line-breaking in &lt;code>RichTextLabel&lt;/code> nodes) is over 700 lines long.
&lt;code>RichTextLabel::_process_line&lt;/code> (the primary offender) also includes several extensive macro definitions. These macros,
such as &lt;a href="https://github.com/gn0mesort/godot/blob/3.5-stable/scene/gui/rich_text_label.cpp#L211">&lt;code>NEW_LINE&lt;/code>&lt;/a>, reduce
the size and redundancy of an already giant method implementation. However, they also defy convenient debugging with
my debugger (&lt;a href="https://www.gnu.org/software/gdb/">GDB&lt;/a>). As a result, I had to trace these sections by hand when
necessary. The source code also contains many short (often one or two-character) symbol names. There&amp;rsquo;s a lot of
&lt;span class="nowrap">C++&lt;/span> source code with inappropriately vague symbol names, so this isn&amp;rsquo;t a shocker. Just
like everything else I&amp;rsquo;ve mentioned, though, this makes the source code more difficult to read and, ultimately, to
debug.&lt;/p>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>To solve these problems, &lt;a href="https://github.com/gn0mesort/godot/tree/3.5">the patched version of Godot&lt;/a>
had to change both the &lt;code>Label&lt;/code> and &lt;code>RichTextLabel&lt;/code> nodes. The core of both nodes&amp;rsquo; new CJK line-breaking functionality
is the &lt;a href="https://github.com/gn0mesort/godot/blob/3.5/scene/gui/gs_cjk.h">&lt;code>gnomesort::is_cjk_x_char&lt;/code>&lt;/a> family of
functions. These functions provide a modular way for Godot scene nodes to classify CJK text. This functionality
includes simple detection (i.e., is the text CJK or not), detection of whether or not a character may end a line,
detection of whether or not a character may begin a line, and detection of whether or not a character is separable
from its neighbors.&lt;/p>
&lt;p>The separability question is particularly complex because it requires analyzing the characters before and after the
current character (if they exist). Determining separability is no big deal for &lt;code>Label&lt;/code> nodes because they always hold
their entire text. &lt;code>RichTextLabel&lt;/code> nodes are another story. For &lt;code>RichTextLabel&lt;/code> nodes, Godot needs to traverse the
internal &lt;code>Item&lt;/code> list. Besides the additional complexity of linked list traversal, which is minimal, &lt;code>RichTextLabel&lt;/code>
nodes require analyzing several characters ahead of the current character to determine the locations of safe breaking
points. This extra complexity is owed, in no small part, to the generally messier way that &lt;code>RichTextLabel&lt;/code> nodes are
processed. Even with additional context, there are still cases where &lt;code>RichTextLabel&lt;/code> nodes can produce incorrect
results.&lt;/p>
&lt;p>The final major issue arises when a &lt;code>RichTextLabel&lt;/code> mixes CJK text with Latin text. For example, this can occur when
text is written in Japanese but switches to Latin characters for a name (likely from user input). Initially, I chose
to detect which rules applied to a given text &lt;code>Item&lt;/code> within a &lt;code>RichTextLabel&lt;/code> by scanning the &lt;code>Item&lt;/code> entirely. This
strategy often works because the entire segment should use the CJK rules if there is CJK text. Problems arise when a
switch occurs across a formatting boundary. This issue can occur when text, like the name in the previous example, is
colored or has some other special formatting (e.g., bold, italics, underlining, etc.). In the name of expediency, I
ultimately chose to implement a toggleable setting that controls whether a &lt;code>RichTextLabel&lt;/code> should apply the CJK rules
to all text.&lt;/p>
&lt;h2 id="thoughts">Thoughts&lt;/h2>
&lt;p>At the end of the day, I stand by the admittedly expedient solution I arrived at. It&amp;rsquo;s rougher around the edges than I
would like, but that kept time and costs to a minimum. Better solutions exist; switching to Godot 4.0 and relying on
&lt;a href="https://docs.godotengine.org/en/stable/classes/class_textserver.html">&lt;code>TextServer&lt;/code>&lt;/a> is the most obvious example, but
it wouldn&amp;rsquo;t have been the correct answer for the client. Still, the time-constrained nature of these types of
contracts frustrates my perfectionist tendencies.&lt;/p>
&lt;p>Besides that, I wonder how using a framework like Godot impacts the economics of a project like Doomsday Paradise. The
simple analysis says it saves time and money, but this project indicates that the simple analysis of large software
frameworks is only sometimes correct. Other times, when the framework doesn&amp;rsquo;t cover all of a developer&amp;rsquo;s needs
perfectly, developers will have to expend resources on workarounds. How often is that the case, and how much do these
workarounds cost? Unfortunately, I don&amp;rsquo;t have an answer, and I haven&amp;rsquo;t been able to find much rigorous data on the
subject. My intuition is that the costs will likely be higher than they initially seem.&lt;/p>
&lt;p>The only way for me to find out is to pursue more of this type of work in the future. Working with Lemonade Flashbang
was my first experience with a commercial game project. It felt like a big step for me despite my relatively small
contribution. Before this, I had tried to work on a few of what I would describe as amateur game projects.
Unfortunately, those never really went anywhere. I still want to try for more amateur projects. However, I enjoyed
getting into Godot&amp;rsquo;s guts, and I know amateurs tend to flee the moment anyone mentions &lt;span class="nowrap">C++&lt;/span>.
Either way, I&amp;rsquo;d like to take on more work like this sooner than later.&lt;/p></description></item></channel></rss>